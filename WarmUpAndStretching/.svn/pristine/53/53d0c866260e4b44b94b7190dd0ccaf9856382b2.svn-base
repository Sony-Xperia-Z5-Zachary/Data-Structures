package list;

import java.util.ArrayList;
import java.util.Collections;

import list.DoublyLinkedList.HeadNode;
import list.DoublyLinkedList.TailNode;

/**
 * 
 * @author anderson
 * 
 * @param <T>
 *            Any Comparable type
 * 
 *            A linked list whose elements are kept in sorted order.
 */
public class SortedLinkedList<T extends Comparable<T>> extends
		DoublyLinkedList<T> {

	/**
	 * Create an empty list
	 * 
	 */
	public SortedLinkedList() {
		super();
	}

	/**
	 * Creates a sorted list containing the same elements as the parameter
	 * 
	 * @param list
	 *            the input list
	 */
	public SortedLinkedList(DoublyLinkedList<T> list) {
		super();
//		this.head = new HeadNode();
//		this.tail = new TailNode();
//
//		this.head.next = this.tail;
//		this.tail.prev = this.head;
		// TODO: finish implementing this constructor
		ArrayList<T> tem = new ArrayList<T>();
		while (!list.isEmpty()){
			tem.add(list.tail.data);
			list.removeLast();
		}
		Collections.sort(tem);
		this.add(tem.get(0));
		
		
		
		
	}

	/**
	 * Adds the given element to the list, keeping it sorted.
	 */
	@Override
	public void add(T element) {
		// TODO: implement this method
	}

	@Override
	public void addFirst(T element) {
		// TODO: throw UnsupportedOperationException exception
	}

	@Override
	public void addLast(T element) {
		// TODO: throw UnsupportedOperationException exception
	}
}
